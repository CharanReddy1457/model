 #include <stdio.h>

int max(int a , int b){
    if(a>b){
        return a;
    }
    else{
        return b;
    }

}

int knapsack(int W, int weights[], int values[], int n) {
    int i, w;
    int dp[n + 1][W + 1];

    for (i = 0; i <= n; i++) {
        for (w = 0; w <= W; w++) {
            if (i == 0 || w == 0) 
                dp[i][w] = 0;
            else if (weights[i - 1] <= w)
                dp[i][w] =max(values[i - 1] + dp[i - 1][w - weights[i - 1]] , dp[i - 1][w]);
            else 
                dp[i][w] = dp[i - 1][w];
        }
    }

    return dp[n][W];
}

int main() {
    int n, W;

    printf("Enter the number of items: ");
    scanf("%d", &n);

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &W);

    int values[n], weights[n];

    printf("Enter the values of the items: \n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &values[i]);
    }

    printf("Enter the weights of the items: \n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &weights[i]);
    }
    
    int max_value = knapsack(W, weights, values, n);
    printf("The maximum value that can be obtained is: %d\n", max_value);

    return 0;
}


#include<stdio.h>
#define N 30
int profit[N];
int wight[N];
int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    else{
        return b;
    }
}
int knapsack(int W , int w[], int pt[] , int n)
{
    if(W==0 || n==0)
    {
        return 0;
    }
    if(w[n-1]>W)
    {
        return knapsack(W ,w , pt , n-1);
    }
    else
        return max(pt[n-1]+knapsack(W-w[n-1] , w, pt, n-1) ,knapsack(W ,w , pt , n-1));

}
int main()
{
  int n;
  printf("enter the number of objects :");
  scanf("%d" ,&n);
  int W;

    printf("enter the maximum weight  :");
  scanf("%d" ,&W);

  int profit[n];
  int weight[n];

  printf("enter the profit of the objects :");
  for(int i=0; i<n;i++)
  {
    scanf("%d" , &profit[i]);
  }


  printf("enter the weight of the objects :");
  for(int i=0; i<n;i++)
  {
    scanf("%d" , &weight[i]);
  }

  printf("the maximum profit is : %d" , knapsack(W ,weight , profit , n ));
  return 0;


}


 #include <stdio.h>
#include <limits.h>

#define MAX_ITEMS 100
#define MAX_CAPACITY 100

int max(int a , int b){
        if(a>b){
            return a;
        }
        else{
            return b;
        }
}
int memo[MAX_ITEMS][MAX_CAPACITY];


void initialize_memo(int n, int capacity) {
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= capacity; w++) {
            memo[i][w] = -1;
        }
    }
}
int knapsack(int weights[], int values[], int n, int capacity) {

    if (n == 0 || capacity == 0)
        return 0;

    if (memo[n][capacity] != -1)
        return memo[n][capacity];

    if (weights[n-1] > capacity)
        return memo[n][capacity] = knapsack(weights, values, n-1, capacity);


    return memo[n][capacity] = max(values[n-1] + knapsack(weights, values, n-1, capacity - weights[n-1]),knapsack(weights, values, n-1, capacity));
}

int main() {
    int values[] = {60, 100, 120};
    int weights[] = {10, 20, 30};
    int capacity = 50;
    int n = sizeof(values) / sizeof(values[0]);


    initialize_memo(n, capacity);

    int max_value = knapsack(weights, values, n, capacity);
    printf("Maximum value in knapsack = %d\n", max_value);

    return 0;
}