#include <stdio.h>
#define MAX 30

int n;
int cost[MAX][MAX];
int parent[MAX]

int find(int i) {
    while (parent[i]>0)
        i = parent[i];
    return i;
}

void uni(int i, int j) {
    if (i != j)
        parent[j] = i;
}

void Kruskals() {
    int a, b, u, v, i, j, ne = 1, min, mincost = 0;
    printf("The edges of Minimum Cost Spanning Tree are\n");

    while (ne < n) {
        for (i = 1, min = 999; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    a = u = i;
                    b = v = j;
                }
            }
        }
        u = find(u);
        v = find(v);
        if (u != v) {
            uni(u, v);
            printf(" edge (%d,%d) = %d\n",a, b, min);
            mincost += min;
        }
        cost[a][b] = cost[b][a] = 999;
    }
    printf("Minimum cost = %d\n", mincost);
}

int main() {
    int i, j;
    printf("\nEnter the number of nodes: ");
    scanf("%d", &n);
    printf("\nEnter the cost adjacency matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j]=999;
        }
    }
    Kruskals();
    return 0;
}
